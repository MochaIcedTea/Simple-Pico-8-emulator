-- Generated by Haxe 4.3.3
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    local res = {}
    local idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
__love_LoveProgram = _hx_e()
local Main = _hx_e()
local Pico8File = _hx_e()
local Math = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringTools = _hx_e()
__haxe_IMap = _hx_e()
__haxe_Exception = _hx_e()
__haxe_Log = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_ds_ObjectMap = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_exceptions_PosException = _hx_e()
__haxe_exceptions_NotImplementedException = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__lua_UserData = _hx_e()
__lua_PairTools = _hx_e()
__lua_Thread = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do _hx_do_first_1 = false;
    
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do _hx_do_first_1 = false;
    
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do _hx_do_first_1 = false;
    
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do _hx_do_first_2 = false;
      
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do _hx_do_first_1 = false;
    
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do _hx_do_first_2 = false;
        
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do _hx_do_first_1 = false;
    
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do _hx_do_first_1 = false;
        
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

__love_LoveProgram.new = function() 
  local self = _hx_new(__love_LoveProgram.prototype)
  __love_LoveProgram.super(self)
  return self
end
__love_LoveProgram.super = function(self) 
  love.load = _hx_bind(self,self.___load);
  love.draw = _hx_bind(self,self.draw);
  love.update = _hx_bind(self,self.update);
end
__love_LoveProgram.__name__ = true
__love_LoveProgram.prototype = _hx_e();
__love_LoveProgram.prototype.___load = function(self,args,unfilteredArgs) 
  self.args = args;
  self.unfilteredArgs = unfilteredArgs;
  self:load();
  do return nil end
end
__love_LoveProgram.prototype.load = function(self) 
end
__love_LoveProgram.prototype.update = function(self,dt) 
end
__love_LoveProgram.prototype.draw = function(self) 
end

Main.new = function() 
  local self = _hx_new(Main.prototype)
  Main.super(self)
  return self
end
Main.super = function(self) 
  self.shouldRunThisFrame = false;
  self.pallete = _hx_tab_array({[0]=_hx_tab_array({[0]=0, 0, 0}, 3), _hx_tab_array({[0]=29, 42, 83}, 3), _hx_tab_array({[0]=126, 37, 83}, 3), _hx_tab_array({[0]=0, 135, 81}, 3), _hx_tab_array({[0]=171, 82, 54}, 3), _hx_tab_array({[0]=95, 87, 79}, 3), _hx_tab_array({[0]=194, 195, 199}, 3), _hx_tab_array({[0]=255, 241, 232}, 3), _hx_tab_array({[0]=255, 0, 77}, 3), _hx_tab_array({[0]=255, 163, 0}, 3), _hx_tab_array({[0]=255, 236, 39}, 3), _hx_tab_array({[0]=0, 228, 54}, 3), _hx_tab_array({[0]=41, 173, 255}, 3), _hx_tab_array({[0]=131, 118, 156}, 3), _hx_tab_array({[0]=255, 119, 168}, 3), _hx_tab_array({[0]=255, 204, 170, 255}, 4)}, 16);
  self.hasInitedENV = false;
  self.initFuncRan = false;
  self.scriptENV = ({});
  self.time = 0;
  __love_LoveProgram.super(self);
end
Main.__name__ = true
Main.main = function() 
  Main.new();
end
Main.prototype = _hx_e();
Main.prototype.getTableValue = function(self,table,valueName) 
  local obj = __haxe_ds_ObjectMap.new();
  __lua_PairTools.pairsFold(table, function(k,v,m) 
    obj.h[k] = v;
    obj.k[k] = true;
    do return obj end;
  end, obj);
  local tblMap = obj;
  if (tblMap.h[valueName] ~= nil) then 
    local ret = tblMap.h[valueName];
    do return (function() 
      local _hx_1
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_1 = nil; else 
      _hx_1 = ret; end
      return _hx_1
    end )() end;
  end;
  do return nil end
end
Main.prototype.load = function(self) 
  __love_LoveProgram.prototype.load(self);
  self.canvasForDrawing = love.graphics.newCanvas(128, 128);
  self.canvasForDrawing:setFilter("nearest", "nearest");
  local _hx_1__script_contents, _hx_1__script_size, _hx_1__script_contents1, _hx_1__script_error = love.filesystem.read("hello.p8");
  local thgng = self:splitFileIntoParts(_hx_1__script_contents);
  __haxe_Log.trace(thgng.code, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=94,className="Main",methodName="load"}));
  local spriteSheet = _hx_tab_array({}, 0);
  local splittedSheet = String.prototype.split(thgng.gfx, "\n");
  local _g = 0;
  while (_g < splittedSheet.length) do _hx_do_first_1 = false;
    
    local line = splittedSheet[_g];
    _g = _g + 1;
    local lineee = _hx_tab_array({}, 0);
    local _g = 0;
    local _g1 = String.prototype.split(line, "");
    while (_g < _g1.length) do _hx_do_first_2 = false;
      
      local char = _g1[_g];
      _g = _g + 1;
      lineee:push(Std.parseInt(char));
    end;
    spriteSheet:push(lineee);
  end;
  spriteSheet:remove(spriteSheet[0]);
  __haxe_Log.trace(spriteSheet:join(","), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=107,className="Main",methodName="load"}));
  local heightSprSheet = spriteSheet.length;
  local widthSprSheet = spriteSheet[1].length;
  __haxe_Log.trace(widthSprSheet, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true,customParams=true},fileName="src/Main.hx",lineNumber=111,className="Main",methodName="load",customParams=_hx_tab_array({[0]=heightSprSheet}, 1)}));
  local outtedSprite = love.image.newImageData(widthSprSheet, heightSprSheet);
  local curY = 1;
  local curX = 1;
  local _g = 0;
  while (_g < spriteSheet.length) do _hx_do_first_1 = false;
    
    local line = spriteSheet[_g];
    _g = _g + 1;
    curX = 1;
    __haxe_Log.trace(line, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=118,className="Main",methodName="load"}));
    local _g = 0;
    while (_g < line.length) do _hx_do_first_2 = false;
      
      local char = line[_g];
      _g = _g + 1;
      if (char ~= nil) then 
        char = Std.int(Math.max(0, char));
        char = Std.int(Math.min(char, self.pallete.length));
        local colFromCol = self.pallete[char];
        if (colFromCol ~= nil) then 
          local r = Math.max(Math.min(colFromCol[0] / 255, 1), 0.0);
          local g = Math.max(Math.min(colFromCol[1] / 255, 1), 0.0);
          local b = Math.max(Math.min(colFromCol[2] / 255, 1), 0.0);
          __haxe_Log.trace(r, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true,customParams=true},fileName="src/Main.hx",lineNumber=131,className="Main",methodName="load",customParams=_hx_tab_array({[0]=g, b}, 2)}));
          __haxe_Log.trace(curX, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true,customParams=true},fileName="src/Main.hx",lineNumber=132,className="Main",methodName="load",customParams=_hx_tab_array({[0]=curY}, 1)}));
          if ((((curX < widthSprSheet) and (curY < heightSprSheet)) and (curX > 0)) and (curY > 0)) then 
            outtedSprite:setPixel(curX - 1, curY - 1, r, g, b, 255);
          end;
        end;
        curX = curX + 1;
      end;
    end;
    curY = curY + 1;
  end;
  outtedSprite:encode("png", "out.png");
  self.spriteSheetImage = love.graphics.newImage(outtedSprite);
  self.spriteSheetImage:setFilter("nearest", "nearest");
  self.script = _hx_box_mr(_hx_table.pack(_G.load(thgng.code)), {"func", "message"});
  while (self.script == nil) do _hx_do_first_1 = false;
    
  end;
  if ((self.script.message ~= nil) and (self.script.message ~= "")) then 
    __haxe_Log.trace(self.script.message, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=151,className="Main",methodName="load"}));
  end;
end
Main.prototype.setColToPalleteCol = function(self,col) 
  if (col == nil) then 
    col = 0;
  end;
  if (col == (0/0)) then 
    col = 0;
  end;
  col = Std.int(Math.max(0, col));
  col = Std.int(Math.min(col, self.pallete.length - 1));
  local colFromCol = self.pallete[col];
  if (colFromCol == nil) then 
    do return end;
  end;
  love.graphics.setColor(colFromCol[0] / 255, colFromCol[1] / 255, colFromCol[2] / 255, 1.);
end
Main.prototype.addFunctions = function(self,ENV) 
  local _gthis = self;
  ENV.music = function(i) 
    __haxe_Log.trace("mus ran!", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=176,className="Main",methodName="addFunctions"}));
  end;
  ENV.spr = function(spr,x,y) 
    local sprSheetXs = _gthis.spriteSheetImage:getWidth();
    local sprSheetYs = _gthis.spriteSheetImage:getHeight();
    local sprSheetX = _G.math.fmod(spr * 8, sprSheetXs);
    local sprSheetY = _G.math.floor(spr / sprSheetYs) * 8;
    love.graphics.draw(_gthis.spriteSheetImage, love.graphics.newQuad(sprSheetX, sprSheetY, 8, 8, _gthis.spriteSheetImage), x, y);
  end;
  ENV.cls = function(col) 
    if (col == nil) then 
      col = 0;
    end;
    if (col == (0/0)) then 
      col = 0;
    end;
    local colFromCol = _gthis.pallete[col];
    col = Std.int(Math.max(0, col));
    col = Std.int(Math.min(col, _gthis.pallete.length - 1));
    love.graphics.clear(colFromCol[0], colFromCol[1], colFromCol[2]);
  end;
  ENV.t = function() 
    do return _gthis.time end;
  end;
  ENV.cos = function(value) 
    do return _G.math.cos(value * 6) end;
  end;
  ENV.pal = function(t1,t2) 
  end;
  ENV.print = function(str,x,y,col) 
  end;
  ENV.rnd = function(min,max) 
    do return 0 end;
  end;
  ENV.fillp = function(thing) 
  end;
  ENV.rectfill = function(x,y,x2,y2,col) 
    _gthis:setColToPalleteCol(col);
    love.graphics.rectangle("fill", x, y, x2, y2);
  end;
  ENV.circfill = function(x,y,r,col) 
    _gthis:setColToPalleteCol(col);
    love.graphics.circle("fill", x, y, r);
  end;
  ENV.sfx = function(id) 
  end;
  ENV.btnp = function(thing) 
  end;
  ENV.all = function(fuckoff) 
    if (fuckoff == nil) then 
      do return function() 
      end end;
    end;
    local length = nil;
    local tab = __lua_PairTools.copy(fuckoff);
    local length = length;
    local thingAsArray;
    if (length == nil) then 
      length = _hx_table.maxn(tab);
      if (length > 0) then 
        local head = tab[1];
        _G.table.remove(tab, 1);
        tab[0] = head;
        thingAsArray = _hx_tab_array(tab, length);
      else
        thingAsArray = _hx_tab_array({}, 0);
      end;
    else
      thingAsArray = _hx_tab_array(tab, length);
    end;
    local thingAsArray = thingAsArray;
    local i = 0;
    local len = thingAsArray.length;
    do return function() 
      len = len - 1;
      i = thingAsArray.length - len;
      while ((fuckoff[i] == nil) and (len > 0)) do _hx_do_first_1 = false;
        
        len = len - 1;
        i = thingAsArray.length - len;
      end;
    end end;
  end;
  ENV.add = function(tbl,thing) 
    local length = nil;
    local tab = __lua_PairTools.copy(tbl);
    local length = length;
    local tblAsArr;
    if (length == nil) then 
      length = _hx_table.maxn(tab);
      if (length > 0) then 
        local head = tab[1];
        _G.table.remove(tab, 1);
        tab[0] = head;
        tblAsArr = _hx_tab_array(tab, length);
      else
        tblAsArr = _hx_tab_array({}, 0);
      end;
    else
      tblAsArr = _hx_tab_array(tab, length);
    end;
    tblAsArr:push(thing);
    local ret = ({});
    local _g = 0;
    local _g1 = tblAsArr.length;
    while (_g < _g1) do _hx_do_first_1 = false;
      
      _g = _g + 1;
      local idx = _g - 1;
      ret[idx + 1] = tblAsArr[idx];
    end;
    tbl = ret;
  end;
end
Main.prototype.getTab = function(self,stuff,toSplitBy) 
  if (stuff == "") then 
    do return "" end;
  end;
  local splittedStuff = String.prototype.split(stuff, toSplitBy);
  if (splittedStuff.length > 1) then 
    do return splittedStuff[1] end;
  end;
  do return "" end
end
Main.prototype.splitFileIntoParts = function(self,code) 
  local realCode = self:getTab(code, "__lua__");
  local realGfx = self:getTab(realCode, "__gfx__");
  local realLabel = self:getTab(realGfx, "__label__");
  local realSfx = self:getTab(realGfx, "__sfx__");
  local realMusic = self:getTab(realGfx, "__music__");
  realCode = StringTools.replace(realCode, realGfx, "");
  realGfx = StringTools.replace(realGfx, realLabel, "");
  realLabel = StringTools.replace(realLabel, realSfx, "");
  realSfx = StringTools.replace(realSfx, realMusic, "");
  realCode = StringTools.replace(realCode, "__lua__", "");
  realCode = StringTools.replace(realCode, "__gfx__", "");
  realGfx = StringTools.replace(realGfx, "__label__", "");
  realLabel = StringTools.replace(realLabel, "__sfx__", "");
  realSfx = StringTools.replace(realSfx, "__music__", "");
  do return Pico8File.new(realCode, realGfx, realSfx, realLabel, realMusic) end
end
Main.prototype.draw = function(self) 
  __love_LoveProgram.prototype.draw(self);
  love.graphics.push();
  love.graphics.setCanvas(self.canvasForDrawing);
  if (self.drawFunction ~= nil) then 
    self.drawFunction();
    local _hx_1_oColor_r, _hx_1_oColor_g, _hx_1_oColor_b, _hx_1_oColor_a = love.graphics.getColor();
    self:setColToPalleteCol(7);
    love.graphics.setColor(1, 1, 1, 1);
    love.graphics.draw(self.spriteSheetImage, 0, 0);
  end;
  love.graphics.pop();
  love.graphics.scale(4, 4);
  love.graphics.setCanvas();
  love.graphics.draw(self.canvasForDrawing);
end
Main.prototype.update = function(self,dt) 
  __love_LoveProgram.prototype.update(self,dt);
  if (not self.hasInitedENV) then 
    if (self.script.func ~= nil) then 
      _G.setfenv(self.script.func, self.scriptENV);
      self:addFunctions(self.scriptENV);
      self.script.func();
      __haxe_Log.trace(self.scriptENV, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=330,className="Main",methodName="update"}));
      self.drawFunction = self:getTableValue(self.scriptENV, "_draw");
      self.updateFunction = self:getTableValue(self.scriptENV, "_update");
      self.update60Function = self:getTableValue(self.scriptENV, "_update60");
      self.initFunction = self:getTableValue(self.scriptENV, "_init");
      if (self.initFunction ~= nil) then 
        self.initFunction();
      end;
      self.hasInitedENV = true;
    end;
    do return end;
  end;
  local tmp = self;
  tmp.time = tmp.time + dt;
  __haxe_Log.trace(self.time, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Main.hx",lineNumber=343,className="Main",methodName="update"}));
  if ((self.updateFunction ~= nil) and self.shouldRunThisFrame) then 
    self.updateFunction();
  end;
  if (self.update60Function ~= nil) then 
    self.update60Function();
  end;
  self.shouldRunThisFrame = not self.shouldRunThisFrame;
end
Main.__super__ = __love_LoveProgram
setmetatable(Main.prototype,{__index=__love_LoveProgram.prototype})

Pico8File.new = function(code,gfx,sfx,label,music) 
  local self = _hx_new()
  Pico8File.super(self,code,gfx,sfx,label,music)
  return self
end
Pico8File.super = function(self,code,gfx,sfx,label,music) 
  self.music = "";
  self.label = "";
  self.sfx = "";
  self.gfx = "";
  self.code = "";
  self.code = code;
  self.gfx = gfx;
  self.sfx = sfx;
  self.label = label;
  self.music = music;
end
Pico8File.__name__ = true

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.max = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.max(a, b) end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do _hx_do_first_1 = false;
    
    local p = String.prototype.indexOf(self, str, ret + 1);
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do _hx_do_first_1 = false;
    
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local sign, numString = _G.string.match(x, "^%s*([%-+]?)0[xX]([%da-fA-F]*)");
  if (numString ~= nil) then 
    if (sign == "-") then 
      do return -_G.tonumber(numString, 16) end;
    else
      do return _G.tonumber(numString, 16) end;
    end;
  end;
  local intMatch = _G.string.match(x, "^%s*[%-+]?%d*");
  if (intMatch == nil) then 
    do return nil end;
  end;
  do return _G.tonumber(intMatch) end;
end

StringTools.new = {}
StringTools.__name__ = true
StringTools.replace = function(s,sub,by) 
  do return String.prototype.split(s, sub):join(by) end;
end

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end

__haxe_Log.new = {}
__haxe_Log.__name__ = true
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do _hx_do_first_1 = false;
      
      local v = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    do return String.prototype.split(s, "\n"):slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})

__haxe_ds_ObjectMap.new = function() 
  local self = _hx_new()
  __haxe_ds_ObjectMap.super(self)
  return self
end
__haxe_ds_ObjectMap.super = function(self) 
  self.h = ({});
  self.k = ({});
end
__haxe_ds_ObjectMap.__name__ = true
__haxe_ds_ObjectMap.__interfaces__ = {__haxe_IMap}

__haxe_ds_StringMap.new = function() 
  local self = _hx_new()
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
end
__haxe_exceptions_PosException.__name__ = true
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(__haxe_Exception.prototype.toString(self))) .. Std.string(" in ")) .. Std.string(self.posInfos.className)) .. Std.string(".")) .. Std.string(self.posInfos.methodName)) .. Std.string(" at ")) .. Std.string(self.posInfos.fileName)) .. Std.string(":")) .. Std.string(self.posInfos.lineNumber) end
end
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
end
__haxe_exceptions_NotImplementedException.__name__ = true
__haxe_exceptions_NotImplementedException.prototype = _hx_e();
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new()
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_PairTools.new = {}
__lua_PairTools.__name__ = true
__lua_PairTools.pairsFold = function(table,func,seed) 
  for k,v in _G.pairs(table) do seed = func(k,v,seed) end;
  do return seed end;
end
__lua_PairTools.copy = function(table1) 
  local ret = ({});
  for k,v in _G.pairs(table1) do ret[k] = v end;
  do return ret end;
end

__lua_Thread.new = {}
__lua_Thread.__name__ = true
if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = true;
  Array.__name__ = true;__haxe_ds_StringMap.tnull = ({});
  
  
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_print = print or (function() end)

_hx_box_mr = function(x,nt)
    res = _hx_o({__fields__={}})
    for i,v in ipairs(nt) do
      res[v] = x[i]
    end
    return res
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

function _hx_handle_error(obj)
  local message = tostring(obj)
  if _G.debug and _G.debug.traceback then
    -- level 2 to skip _hx_handle_error
    message = _G.debug.traceback(message, 2)
  end
  return setmetatable({}, { __tostring = function() return message end })
end

_hx_static_init();
local success, err = _G.xpcall(function() 
  Main.main();
  _hx_luv.run();
end, _hx_handle_error)
if not success then _G.error(err) end
